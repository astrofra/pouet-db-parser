import os
import ollama
from collections import defaultdict

# Input and output folders
monthly_folder = "./monthly_digests"
yearly_folder = "./yearly_digests"
os.makedirs(yearly_folder, exist_ok=True)

# LLM model
MODEL_NAME = 'llama3:8b'

# Prompt for summarizing a full year
YEARLY_PROMPT_TEMPLATE = """
You are analyzing a full year of short messages and community activity from the demoscene chat on Pouet.net. These are already monthly summaries generated by an LLM.

Your task is to synthesize a **yearly summary** from the following monthly digests, on a social, anthropological and technical point of view.
Write in plain text, essay-style or report-style, NO BULLET POINT.

Here is the collection of monthly summaries for the year:
---
{text}

NO BULLET POINT !!!!
"""

# Gather all monthly files and group them by year
monthly_files_by_year = defaultdict(list)

for filename in sorted(os.listdir(monthly_folder)):
    if filename.endswith(".md"):
        year = filename[:4]
        monthly_files_by_year[year].append(os.path.join(monthly_folder, filename))

# Loop over each year and generate a yearly summary
for year, filepaths in monthly_files_by_year.items():
    output_path = os.path.join(yearly_folder, f"{year}.md")

    if not os.path.isfile(output_path):
        print(f"Generating yearly digest for {year}...")

        # Concatenate monthly summaries
        combined_text = ""
        for path in filepaths:
            with open(path, "r", encoding="utf-8") as f:
                combined_text += f"\n\n---\n\n" + f.read()

        # Build prompt
        prompt = YEARLY_PROMPT_TEMPLATE.format(text=combined_text)

        try:
            response = ollama.chat(
                model=MODEL_NAME,
                messages=[{
                    'role': 'user',
                    'content': prompt
                }]
            )

            with open(output_path, "w", encoding="utf-8") as out_f:
                out_f.write(response["message"]["content"])

        except Exception as e:
            print(f"Error generating yearly digest for {year}: {e}")

print(f"Yearly digests saved to {yearly_folder}")
